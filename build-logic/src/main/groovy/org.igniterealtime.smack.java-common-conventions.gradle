plugins {
	id 'biz.aQute.bnd.builder'
	id 'checkstyle'
	id 'eclipse'
	id 'idea'
	id 'jacoco'
	id 'java'
	id 'java-library'
	id 'java-test-fixtures'
	id 'net.ltgt.errorprone'
	id 'signing'
	id 'com.github.ben-manes.versions'
	id 'com.vanniktech.maven.publish'

	id 'jacoco-report-aggregation'
	id 'test-report-aggregation'

	id 'org.igniterealtime.smack.global-conventions'
	id 'org.igniterealtime.smack.javadoc-conventions'
}

ext {
	isSnapshot = version.endsWith('-SNAPSHOT')
	gitCommit = getGitCommit()
	rootConfigDir = new File(rootDir, 'config')
	isReleaseVersion = !isSnapshot
	isContinuousIntegrationEnvironment = Boolean.parseBoolean(System.getenv('CI'))
	signingRequired = !(isSnapshot || isContinuousIntegrationEnvironment)
	builtDate = (new java.text.SimpleDateFormat("yyyy-MM-dd")).format(new Date())
	oneLineDesc = 'An Open Source XMPP (Jabber) client library'

	jxmppVersion = '[1.1.0, 1.1.999]'
	miniDnsVersion = '[1.1.0-alpha3, 1.1.999]'
	junitVersion = '5.12.2'
	commonsIoVersion = '2.17.0'
	bouncyCastleVersion = '1.73'
	guavaVersion = '33.3.1-jre'
	mockitoVersion = '5.18.0'
	orgReflectionsVersion = '0.10.2'

	if (project.hasProperty("useSonatype")) {
		useSonatype = project.getProperty("useSonatype").toBoolean()
	} else {
		// Default to true
		useSonatype = true
	}

	gplLicensedProjects = [
			':smack-examples',
			':smack-omemo-signal',
			':smack-omemo-signal-integration-test',
			':smack-repl'
		].collect{ project(it) }
}

group = 'org.igniterealtime.smack'

java {
	sourceCompatibility = javaVersion
	targetCompatibility = sourceCompatibility
}

eclipse {
	classpath {
		downloadJavadoc = true
	}
}

// Make all project's 'test' target depend on javadoc, so that
// javadoc is also linted.
test.dependsOn javadoc

tasks.withType(JavaCompile) {
	// Some systems may not have set their platform default
	// converter to 'utf8', but we use unicode in our source
	// files. Therefore ensure that javac uses unicode
	options.encoding = "utf8"
	options.compilerArgs = [
		'-Xlint:all',
		// Set '-options' because a non-java7 javac will emit a
		// warning if source/target is set to 1.7 and
		// bootclasspath is *not* set.
		'-Xlint:-options',
		// TODO: Enable xlint serial
		'-Xlint:-serial',
		'-Werror',
	]
	options.release = Integer.valueOf(javaMajor)
}

jacoco {
	toolVersion = "0.8.12"
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
	}
}

dependencies {
	testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

	testFixturesApi "org.junit.jupiter:junit-jupiter-api:$junitVersion"
	testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
	// https://stackoverflow.com/a/77274251/194894
	testImplementation "org.junit.platform:junit-platform-launcher:1.12.2"

	// The smack-extensions subproject uses mockito in its fest
	// fixtures, and we want to have mockito also available in
	// test, so we use API here.
	testFixturesApi "org.mockito:mockito-core:${mockitoVersion}"

	testImplementation 'com.jamesmurty.utils:java-xmlbuilder:1.3'

	errorprone 'com.google.errorprone:error_prone_core:2.41.0'
}

test {
	useJUnitPlatform()

	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1

	// Enable full stacktraces of failed tests. Especially handy
	// for CI environments.
	testLogging {
		events "failed"
		exceptionFormat = "full"
		showStandardStreams = true
	}
}

jar {
	manifest {
		attributes(
			'Implementation-Version': version,
			'Implementation-GitRevision': gitCommit,
			'Built-JDK': System.getProperty('java.version'),
			'Built-Gradle': gradle.gradleVersion,
			'Built-By': System.getProperty('user.name')
		)
	}

	bundle {
		bnd(
				'-removeheaders': 'Tool, Bnd-*',
				'-exportcontents': '*',
		)
	}
}

checkstyle {
	toolVersion = '10.18.2'

	if (project in gplLicensedProjects) {
		configProperties.checkstyleLicenseHeader = "${project.name}-gplv3-license-header"
	} else {
		configProperties.checkstyleLicenseHeader = "header"
	}
}
task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = 'sources'
	from sourceSets.main.allSource
}
task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier = 'javadoc'
	from javadoc.destinationDir
}
task testsJar(type: Jar) {
	archiveClassifier = 'tests'
	from sourceSets.test.output
}
configurations {
	testRuntime
}
artifacts {
	// Add a 'testRuntime' configuration including the tests so that
	// it can be consumed by other projects (smack-omemo-signal for
	// example).  See http://stackoverflow.com/a/21946676/194894
	testRuntime testsJar
}


mavenPublishing {
	publishToMavenCentral()

	signAllPublications()

	pom {
		name = 'Smack'
		packaging = 'jar'
		inceptionYear = '2003'
		url = 'http://www.igniterealtime.org/projects/smack/'
		afterEvaluate {
			description = project.description
		}

		issueManagement {
			system = 'JIRA'
			url = 'http://issues.igniterealtime.org/browse/SMACK'
		}

		scm {
			url = 'https://github.com/igniterealtime/Smack'
			connection = 'scm:git:https://github.com/igniterealtime/Smack.git'
			developerConnection = 'scm:git:https://github.com/igniterealtime/Smack.git'
		}

		licenses {
			if (project in gplLicensedProjects) {
				license {
					name = 'GNU General Public License, version 3 or any later version'
					url = 'https://www.gnu.org/licenses/gpl.txt'
					distribution = 'repo'
				}
			} else {
				license {
					name = 'The Apache Software License, Version 2.0'
					url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					distribution = 'repo'
				}
			}
		}

		developers {
			developer {
				id = 'flow'
				name = 'Florian Schmaus'
				email = 'flow@igniterealtime.org'
			}
		}
	}
}

// Workaround for gpg signatory not supporting the 'required' option
// See https://github.com/gradle/gradle/issues/5064#issuecomment-381924984
// Note what we use 'signing.gnupg.keyName' instead of 'signing.keyId'.
tasks.withType(Sign) {
	onlyIf {
		project.hasProperty('signing.gnupg.keyName')
	}
}
signing {
	required  = signingRequired
	useGpgCmd()
}

tasks.withType(JavaCompile) {
	options.errorprone {
		disableWarningsInGeneratedCode = true
		excludedPaths = ".*/jmh_generated/.*"
		error(
			"UnusedVariable",
			"UnusedMethod",
			"MethodCanBeStatic",
		)
		errorproneArgs = [
			// Disable MissingCasesInEnumSwitch error prone check
			// because this check is already done by javac as incomplete-switch.
			'-Xep:MissingCasesInEnumSwitch:OFF',
			'-Xep:StringSplitter:OFF',
			'-Xep:JavaTimeDefaultTimeZone:OFF',
			'-Xep:InlineMeSuggester:OFF',
		]
	}
}

// Work around https://github.com/gradle/gradle/issues/4046
task copyJavadocDocFiles(type: Copy) {
	from('src/javadoc')
	into 'build/docs/javadoc'
	include '**/doc-files/*.*'
}
javadoc.dependsOn copyJavadocDocFiles

def getGitCommit() {
	def projectDirFile = new File("$projectDir")

	def cmd = 'git describe --always --tags --dirty=+'
	def proc = cmd.execute(null, projectDirFile)

	def exitStatus = proc.waitFor()
	if (exitStatus != 0) return "non-git build"

	def gitCommit = proc.text.trim()
	assert !gitCommit.isEmpty()
	gitCommit
}
