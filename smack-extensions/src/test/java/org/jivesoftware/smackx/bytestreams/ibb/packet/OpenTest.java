/*
 *
 * Copyright the original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.jivesoftware.smackx.bytestreams.ibb.packet;

import static org.jivesoftware.smack.test.util.XmlAssertUtil.assertXmlSimilar;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;

import java.util.Properties;

import org.jivesoftware.smack.packet.IQ;
import org.jivesoftware.smack.packet.StreamOpen;
import org.jivesoftware.smack.test.util.SmackTestSuite;

import org.jivesoftware.smackx.bytestreams.ibb.InBandBytestreamManager.StanzaType;

import com.jamesmurty.utils.XMLBuilder;
import org.junit.jupiter.api.Test;
import org.jxmpp.jid.impl.JidCreate;

/**
 * Test for the Open class.
 *
 * @author Henning Staib
 */
public class OpenTest extends SmackTestSuite {

    @Test
    public void shouldNotInstantiateWithInvalidArguments1() {
        assertThrows(IllegalArgumentException.class, () -> {
            new Open(null, 1);
        });
    }

    @Test
    public void shouldNotInstantiateWithInvalidArguments2() {
        assertThrows(IllegalArgumentException.class, () -> {
            new Open("", 1);
        });
    }

    @Test
    public void shouldNotInstantiateWithInvalidArguments3() {
        assertThrows(IllegalArgumentException.class, () -> {
            new Open("sessionID", -1);
        });
    }

    @Test
    public void shouldSetIQStanzaAsDefault() {
        Open open = new Open("sessionID", 4096);
        assertEquals(StanzaType.IQ, open.getStanza());
    }

    @Test
    public void shouldUseMessageStanzaIfGiven() {
        Open open = new Open("sessionID", 4096, StanzaType.MESSAGE);
        assertEquals(StanzaType.MESSAGE, open.getStanza());
    }

    @Test
    public void shouldBeOfIQTypeSET() {
        Open open = new Open("sessionID", 4096);
        assertEquals(IQ.Type.set, open.getType());
    }

    @Test
    public void shouldSetAllFieldsCorrectly() {
        Open open = new Open("sessionID", 4096, StanzaType.MESSAGE);
        assertEquals("sessionID", open.getSessionID());
        assertEquals(4096, open.getBlockSize());
        assertEquals(StanzaType.MESSAGE, open.getStanza());
    }

    private static final Properties outputProperties = new Properties();
    {
        outputProperties.put(javax.xml.transform.OutputKeys.OMIT_XML_DECLARATION, "yes");
    }

    @Test
    public void shouldReturnValidIQStanzaXML() throws Exception {
        String control = XMLBuilder.create("iq")
            .a("from", "romeo@montague.lit/orchard")
            .a("to", "juliet@capulet.lit/balcony")
            .a("id", "jn3h8g65")
            .a("type", "set")
            .e("open")
                .a("xmlns", "http://jabber.org/protocol/ibb")
                .a("block-size", "4096")
                .a("sid", "i781hf64")
                .a("stanza", "iq")
            .asString(outputProperties);

        Open open = new Open("i781hf64", 4096, StanzaType.IQ);
        open.setFrom(JidCreate.from("romeo@montague.lit/orchard"));
        open.setTo(JidCreate.from("juliet@capulet.lit/balcony"));
        open.setStanzaId("jn3h8g65");

        assertXmlSimilar(control, open.toXML(StreamOpen.CLIENT_NAMESPACE).toString());
    }


}
